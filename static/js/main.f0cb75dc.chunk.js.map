{"version":3,"sources":["reportWebVitals.ts","suspense/withSuspense.tsx","suspense/wrapPromise.ts","pages/names/api.ts","pages/names/Count/Count.tsx","pages/names/Count/index.ts","debounce.ts","pages/names/Search/Input.tsx","pages/names/Search/Result.tsx","pages/names/Search/index.ts","pages/names/Search/Search.tsx","pages/names/Table/Table.tsx","pages/names/Table/index.ts","pages/names/Names.tsx","pages/names/index.ts","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","withSuspense","Component","props","Suspense","fallback","suspended","wrapPromise","promise","result","status","suspender","value","reason","read","hasNames","a","body","names","Array","isArray","length","name","amount","fetch","response","ok","Error","json","fetchNames","Count","sum","React","useCallback","map","reduce","b","size","direction","style","width","height","title","undefined","loading","data","wordField","weightField","colorField","wordStyle","fontFamily","fontSize","displayName","debounce","action","timeout","id","args","clearInterval","setTimeout","Search","AntdInput","Input","onChange","disabled","event","target","placeholder","Result","description","Paragraph","Item","useState","filter","setFilter","match","matches","nameLower","toLowerCase","filterLower","includes","push","columns","dataIndex","key","sorter","localeCompare","Table","tableLayout","dataSource","rowKey","record","TabPane","Tabs","Names","screens","Grid","useBreakpoint","tabPosition","md","tab","Text","Typography","App","display","minHeight","justifyContent","Content","maxWidth","padding","ghost","subTitle","sm","extra","shape","href","GithubOutlined","Footer","textAlign","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAeeA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,mHCUCQ,MAXf,SAA8BC,GAC5B,OAAO,SAAyBC,GAC9B,OACE,cAAC,IAAMC,SAAP,CAAgBC,SAAU,cAACH,EAAD,aAAWI,WAAW,GAAUH,IAA1D,SACE,cAACD,EAAD,aAAWI,WAAW,GAAWH,QCmB1BI,MAxBf,SAAwBC,GACtB,IACIC,EADAC,EAAiB,UAGfC,EAAYH,EAAQb,MACxB,SAAAiB,GACEF,EAAS,UAAWD,EAASG,KAE/B,SAAAC,GACEH,EAAS,QAAWD,EAASI,KAIjC,MAAO,CACLC,KADK,WAEH,GAAe,YAAXJ,EAAsB,MAAMC,EAChC,GAAe,UAAXD,EAAsB,MAAMD,EAEhC,OAAOA,K,sECdb,qBAWWM,EAXX,SAAAC,EAAA,6DAWWD,EAXX,SAWoBE,GAChB,GAAoB,kBAATA,EAAmB,OAAO,EACrC,GAAa,OAATA,EAA0B,OAAO,EAErC,KAAM,UAAWA,GAAsB,OAAO,EAE9C,IAAMC,EAASD,EAA4BC,MAE3C,IAAKC,MAAMC,QAAQF,GAAY,OAAO,EAEtC,GAAqB,IAAjBA,EAAMG,OAAc,OAAO,EAE/B,GAAwB,kBAAbH,EAAM,GAAiB,OAAO,EACzC,GAAiB,OAAbA,EAAM,GAAwB,OAAO,EAEzC,KAAM,SAAUA,EAAM,IAAO,OAAO,EACpC,KAAM,WAAYA,EAAM,IAAK,OAAO,EAhB0B,MAkBpCA,EAAM,GAAxBI,EAlBsD,EAkBtDA,KAAMC,EAlBgD,EAkBhDA,OAEd,MAAoB,kBAATD,GACW,kBAAXC,GAhCf,SACyBC,MAAM,6EAD/B,WACQC,EADR,QAGgBC,GAHhB,sBAG0B,IAAIC,MAAM,0BAHpC,uBAKqBF,EAASG,OAL9B,UAKQX,EALR,OAOOF,EAASE,GAPhB,uBAO6B,IAAIU,MAAM,0BAPvC,iCASSV,EAAKC,OATd,6C,sBAsCA,IAGeA,EAHDX,E,0CAAYsB,ICvCpBC,EAA8B,SAAC,GAAmB,IAAjBxB,EAAgB,EAAhBA,UAC/ByB,EAAMC,IAAMC,aAAY,kBAC5Bf,EAAMJ,OACHoB,KAAI,SAAAZ,GAAI,OAAIA,EAAKC,UACjBY,QAAO,SAACnB,EAAGoB,GAAJ,OAAUpB,EAAIoB,OAAI,IAE9B,OACE,eAAC,IAAD,CAAOC,KAAK,QAAQC,UAAU,WAAWC,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAA1E,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CACEC,MAAM,wBACN9B,MAAON,OAAYqC,EAAYZ,IAC/Ba,QAAStC,MAEb,cAAC,IAAD,IACA,cAAC,IAAD,CACEuC,KAAMvC,EAAY,GAAKY,EAAMJ,OAC7BgC,UAAU,OACVC,YAAY,SACZC,WAAW,OACXC,UAAW,CAAEC,WAAY,UAAWC,SAAU,CAAC,GAAI,WAK3DrB,EAAMsB,YAAc,QAGLnD,ICpCA6B,EDoCA7B,EAAa6B,G,eE1BbuB,MAXf,SAAqBC,EAAmBC,GACtC,IAAIC,EAA4B,KAEhC,OAAO,SAAAC,GACDD,GAAIE,cAAcF,GAEtBA,EAAKG,YAAW,WAAWL,EAAOG,KAAOF,KCJrCK,E,OAAWC,EAAXD,OAoBOE,EAbqB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAG/C,OACE,cAAC,EAAD,CACEA,SAAUA,EACVD,SALiB,SAACE,GAAD,OAAsDF,EAASE,EAAMC,OAAOtD,QAM7F2B,MAAO,CAAEC,MAAO,QAChB2B,YAAY,oB,kBCOHC,EAfuB,SAAC,GAAe,IAAblD,EAAY,EAAZA,MACvC,OAAqB,IAAjBA,EAAMG,OAAqB,cAAC,IAAD,CAAOgD,YAAY,eAC9CnD,EAAMG,QAAU,EAAW,cAAC,IAAWiD,UAAZ,+BACV,IAAjBpD,EAAMG,OACR,eAAC,IAAWiD,UAAZ,yBAAkCpD,EAAM,GAAGK,OAA3C,oBAAoEL,EAAM,GAAGI,QAI7E,cAAC,IAAD,CAAMiB,MAAO,CAAEC,MAAO,QAAtB,SACGtB,EAAMgB,KAAI,gBAAGZ,EAAH,EAAGA,KAAH,OAAc,cAAC,IAAKiD,KAAN,UAAuBjD,GAAPA,SCjBhCsC,ECwCA3D,GA7BuB,SAAC,GAAmB,IAAjBK,EAAgB,EAAhBA,UAAgB,EAC3B0B,IAAMwC,SAAS,IADY,mBAChDC,EADgD,KACxCC,EADwC,KAGjDC,EAAQ3C,IAAMC,aAClB,WACE,IADI,EACE2C,EAAkB,GADpB,cAGe1D,EAAMJ,QAHrB,IAGJ,2BAAiC,CAAC,IAAvBQ,EAAsB,QACzBuD,EAAcvD,EAAKA,KAAKwD,cACxBC,EAAcN,EAAOK,cAE3B,GAAID,IAAcE,EAAmB,MAAO,CAACzD,GACzCuD,EAAUG,SAASD,IAAcH,EAAQK,KAAK3D,IARhD,8BAWJ,OAAOsD,IAET,CAACH,IAGH,OACE,eAAC,IAAD,CAAOnC,UAAU,WAAWD,KAAK,QAAQE,MAAO,GAAhD,UACE,cAAC,EAAD,CAAOwB,SAAUV,EAASqB,EAAW,KAAMV,SAAU1D,IACrD,cAAC,EAAD,CAAQY,MAAOZ,EAAY,GAAKqE,Y,SC5BhCO,EAA6B,CACjC,CAAExC,MAAO,OAASyC,UAAY,OAAUC,IAAK,OAAUC,OAAQ,SAACrE,EAAGoB,GAAJ,OAAUpB,EAAEM,KAAKgE,cAAclD,EAAEd,QAChG,CAAEoB,MAAO,SAAUyC,UAAW,SAAUC,IAAK,SAAUC,OAAQ,SAACrE,EAAGoB,GAAJ,OAAUpB,EAAEO,OAASa,EAAEb,UCRzEgE,EDwBAtF,GAXqB,SAAC,GAAmB,IAAjBK,EAAgB,EAAhBA,UACrC,OACE,cAAC,IAAD,CACEkF,YAAY,QACZC,WAAYnF,OAAYqC,EAAYzB,EAAMJ,OAC1CoE,QAASA,EACTQ,OAAQpF,OAAYqC,EAAY,SAAAgD,GAAM,OAAIA,EAAOrE,WEb/CsE,EAAYC,IAAZD,QAQFE,EAAyC,WAC7C,IAAMC,EAAUC,IAAKC,gBAErB,OACE,eAAC,IAAD,CAAMC,YAAaH,EAAQI,GAAK,OAAS,MAAzC,UACE,cAACP,EAAD,CAASQ,IAAI,QAAb,SACE,cAAC,EAAD,KADuB,KAGzB,cAACR,EAAD,CAASQ,IAAI,SAAb,SACE,cAAC,EAAD,KADwB,KAG1B,cAACR,EAAD,CAASQ,IAAI,QAAb,SACE,cAAC,EAAD,KADuB,SAO/BN,EAAMhE,MAASA,EACfgE,EAAMlC,OAASA,EACfkC,EAAMP,MAASA,EAGAO,ICrCAA,EDqCAA,EEhCPO,EAASC,IAATD,KAiCOE,EA/BO,WACpB,IAAMR,EAAUC,IAAKC,gBAErB,OACE,eAAC,IAAD,CAAQ1D,MAAO,CAAEiE,QAAS,OAAQ/D,OAAQ,OAAQgE,UAAW,OAAQC,eAAgB,UAArF,UACE,cAAC,IAAOC,QAAR,CAAgBpE,MAAO,CAAEE,OAAQ,OAAQD,MAAO,OAAQoE,SAAU,IAAKC,QAAS,IAAhF,SACE,eAAC,IAAD,CAAOvE,UAAU,WAAjB,UACE,cAAC,IAAD,CACEwE,OAAO,EACPpE,MAAM,QACNqE,SAAUhB,EAAQiB,GAAK,0BAA4B,KACnDC,MAAO,CACL,cAAC,IAAD,CAEEC,MAAM,SACN7E,KAAK,QACL8E,KAAK,2CAJP,SAKE,cAACC,EAAA,EAAD,KAJI,aAOV,cAAC,EAAD,SAGJ,cAAC,IAAOC,OAAR,CAAe9E,MAAO,CAAE+E,UAAW,UAAnC,SACE,cAACjB,EAAD,CAAMkB,KAAK,YAAX,8BCvBRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAO1BpI,M","file":"static/js/main.f0cb75dc.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\n\ntype Component<TProps> = React.FunctionComponent<TProps>;\n\ninterface SuspenseProps {\n  suspended: boolean;\n}\n\nfunction withSuspense<TProps>(Component: Component<TProps & SuspenseProps>): Component<TProps> {\n  return function SuspenseWrapper(props: TProps): ReturnType<Component<TProps>> {\n    return (\n      <React.Suspense fallback={<Component suspended={true} {...props} />}>\n        <Component suspended={false} {...props} />\n      </React.Suspense>\n    );\n  };\n}\n\n\nexport default withSuspense;\nexport type { SuspenseProps };\n","import Resource from './resource';\n\n\ntype Status =\n  | 'pending'\n  | 'error'\n  | 'success';\n\nfunction wrapPromise<T>(promise: Promise<T>): Resource<T> {\n  let status: Status = 'pending';\n  let result: T;\n\n  const suspender = promise.then(\n    value  => {\n      status = 'success'; result = value;\n    },\n    reason => {\n      status = 'error';   result = reason;\n    }\n  );\n\n  return {\n    read() {\n      if (status === 'pending') throw suspender;\n      if (status === 'error')   throw result;\n\n      return result;\n    }\n  };\n}\n\n\nexport default wrapPromise;\n","import { wrapPromise } from '../../suspense';\n\n\ninterface Name {\n  name: string;\n  amount: number;\n}\n\ninterface ResponseBodyWithNames {\n  names: Name[];\n}\n\nasync function fetchNames(): Promise<Name[]> {\n  const response = await fetch('https://raw.githubusercontent.com/solita/dev-academy-2021/main/names.json');\n\n  if (!response.ok) throw new Error('Failed to fetch names.');\n\n  const body = await response.json();\n\n  if (!hasNames(body)) throw new Error('Invalid response body.');\n\n  return body.names;\n\n  function hasNames(body: unknown): body is ResponseBodyWithNames {\n    if (typeof body !== 'object') return false;\n    if (body === null)            return false;\n\n    if (!('names' in body))                return false;\n\n    const names = (body as { names: unknown }).names;\n\n    if (!Array.isArray(names))     return false;\n\n    if (names.length === 0) return true;\n\n    if (typeof names[0] !== 'object') return false;\n    if (names[0] === null)            return false;\n\n    if (!('name' in names[0]))   return false;\n    if (!('amount' in names[0])) return false;\n\n    const { name, amount } = (names[0] as { name: unknown, amount: unknown });\n\n    if (typeof name !== 'string')   return false;\n    if (typeof amount !== 'number') return false;\n\n    return true;\n  }\n}\n\nconst names = wrapPromise(fetchNames());\n\n\nexport default names;\nexport type { Name };\n","import React from 'react';\n\nimport { Card, Divider, Space, Statistic } from 'antd';\nimport { WordCloud } from '@ant-design/charts';\n\nimport { withSuspense, SuspenseProps } from '../../../suspense';\nimport names from '../api';\n\n\ntype CountProps = SuspenseProps;\n\nconst Count: React.FC<CountProps> = ({ suspended }) => {\n  const sum = React.useCallback(() =>\n    names.read()\n      .map(name => name.amount)\n      .reduce((a, b) => a + b), []);\n\n  return (\n    <Space size=\"small\" direction=\"vertical\" style={{ width: '600px', height: '100%' }}>\n      <Card>\n        <Statistic\n          title=\"Total amount of names\"\n          value={suspended ? undefined : sum()}\n          loading={suspended} />\n      </Card>\n      <Divider />\n      <WordCloud\n        data={suspended ? [] : names.read()}\n        wordField=\"name\"\n        weightField=\"amount\"\n        colorField=\"name\"\n        wordStyle={{ fontFamily: 'Verdana', fontSize: [18, 64] }} />\n    </Space>\n  );\n};\n\nCount.displayName = 'Count';\n\n\nexport default withSuspense(Count);\n","import Count from './Count';\n\n\nexport default Count;\n","type Action<T> = (args: T) => void;\n\nfunction debounce<T>(action: Action<T>, timeout: number): Action<T> {\n  let id: NodeJS.Timeout | null = null;\n\n  return args => {\n    if (id) clearInterval(id);\n\n    id = setTimeout(() => void action(args), timeout);\n  };\n}\n\n\nexport default debounce;\n","import React from 'react';\nimport { Input as AntdInput } from 'antd';\n\n\nconst { Search } = AntdInput;\n\ninterface InputProps {\n  onChange: (value: string) => void;\n  disabled: boolean;\n}\n\nconst Input: React.FC<InputProps> = ({ onChange, disabled }) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => onChange(event.target.value);\n\n  return (\n    <Search\n      disabled={disabled}\n      onChange={handleChange}\n      style={{ width: '100%' }}\n      placeholder=\"Search by name\" />\n  );\n};\n\n\nexport default Input;\n","import React from 'react';\n\nimport { Empty, List, Typography } from 'antd';\n\nimport { Name } from '../api';\n\n\ninterface ResultProps {\n  names: Name[];\n}\n\nconst Result: React.FC<ResultProps> = ({ names }) => {\n  if (names.length === 0) return <Empty description=\"No matches\" />;\n  if (names.length >= 5)  return <Typography.Paragraph>Too many matches</Typography.Paragraph>;\n  if (names.length === 1) return (\n    <Typography.Paragraph>Solita has {names[0].amount} employees named {names[0].name}</Typography.Paragraph>\n  );\n\n  return (\n    <List style={{ width: '100%' }}>\n      {names.map(({ name }) => <List.Item key={name}>{name}</List.Item>)}\n    </List>\n  );\n};\n\n\nexport default Result;\n","import Search from './Search';\n\n\nexport default Search;\n","import React from 'react';\n\nimport { Space } from 'antd';\n\nimport { SuspenseProps, withSuspense } from '../../../suspense';\nimport names, { Name } from '../api';\nimport debounce from '../../../debounce';\n\nimport Input from './Input';\nimport Result from './Result';\n\n\ntype SearchProps = SuspenseProps;\n\nconst Search: React.FC<SearchProps> = ({ suspended }) => {\n  const [filter, setFilter] = React.useState('');\n\n  const match = React.useCallback(\n    () => {\n      const matches: Name[] = [];\n\n      for (const name of names.read()) {\n        const nameLower   = name.name.toLowerCase();\n        const filterLower = filter.toLowerCase();\n\n        if (nameLower === filterLower)       return [name];\n        if (nameLower.includes(filterLower)) matches.push(name);\n      }\n\n      return matches;\n    },\n    [filter]\n  );\n\n  return (\n    <Space direction=\"vertical\" size=\"large\" style={{}}>\n      <Input onChange={debounce(setFilter, 250)} disabled={suspended} />\n      <Result names={suspended ? [] : match()} />\n    </Space>\n  );\n};\n\n\nexport default withSuspense(Search);\n","import React from 'react';\n\nimport { Table as AntdTable } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\n\nimport { SuspenseProps, withSuspense } from '../../../suspense';\nimport names, { Name } from '../api';\n\n\nconst columns: ColumnsType<Name> = [\n  { title: 'Name',  dataIndex:  'name',   key: 'name',   sorter: (a, b) => a.name.localeCompare(b.name) },\n  { title: 'Amount', dataIndex: 'amount', key: 'amount', sorter: (a, b) => a.amount - b.amount          }\n];\n\ntype TableProps = SuspenseProps;\n\nconst Table: React.FC<TableProps> = ({ suspended }) => {\n  return (\n    <AntdTable\n      tableLayout=\"fixed\"\n      dataSource={suspended ? undefined : names.read()}\n      columns={columns}\n      rowKey={suspended ? undefined : record => record.name} />\n  );\n};\n\n\nexport default withSuspense(Table);\n","import Table from './Table';\n\n\nexport default Table;\n","import React from 'react';\n\nimport { Grid, Tabs } from 'antd';\n\nimport Count from './Count';\nimport Search from './Search';\nimport Table from './Table';\n\n\nconst { TabPane } = Tabs;\n\ninterface NamesInnerComponents {\n  Count:  typeof Count,\n  Search: typeof Search,\n  Table:  typeof Table\n}\n\nconst Names: React.FC & NamesInnerComponents = () => {\n  const screens = Grid.useBreakpoint();\n\n  return (\n    <Tabs tabPosition={screens.md ? 'left' : 'top'}>\n      <TabPane tab=\"Count\" key=\"1\">\n        <Count />\n      </TabPane>\n      <TabPane tab=\"Search\" key=\"2\">\n        <Search />\n      </TabPane>\n      <TabPane tab=\"Table\" key=\"3\">\n        <Table />\n      </TabPane>\n    </Tabs>\n  );\n};\n\nNames.Count  = Count;\nNames.Search = Search;\nNames.Table  = Table;\n\n\nexport default Names;\n","import Names from './Names';\n\n\nexport default Names;\n","import React from 'react';\n\nimport { Button, Grid, Layout, PageHeader, Space, Typography } from 'antd';\nimport { GithubOutlined } from '@ant-design/icons';\n\nimport { Names } from './pages';\n\n\nconst { Text } = Typography;\n\nconst App: React.FC = () => {\n  const screens = Grid.useBreakpoint();\n\n  return (\n    <Layout style={{ display: 'grid', height: '100%', minHeight: '100%', justifyContent: 'center' }}>\n      <Layout.Content style={{ height: '100%', width: '100%', maxWidth: 960, padding: 16 }}>\n        <Space direction=\"vertical\">\n          <PageHeader\n            ghost={true}\n            title=\"Names\"\n            subTitle={screens.sm ? 'Solita Dev Academy 2021' : null}\n            extra={[\n              <Button\n                key=\"GitHub\"\n                shape=\"circle\"\n                size=\"large\"\n                href=\"https://www.github.com/vanhanenjjv/names\">\n                <GithubOutlined />\n              </Button>\n            ]} />\n          <Names />\n        </Space>\n      </Layout.Content>\n      <Layout.Footer style={{ textAlign: 'center' }}>\n        <Text type=\"secondary\">git commit</Text>\n      </Layout.Footer>\n    </Layout>\n  );\n};\n\n\nexport default App;\n","import 'antd/dist/antd.css';\nimport './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from './reportWebVitals';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}