{"version":3,"sources":["serviceWorkerRegistration.ts","reportWebVitals.ts","pages/Names/Header.tsx","suspense/withSuspense.tsx","suspense/wrapPromise.ts","pages/Names/api.ts","pages/Names/Count/Count.tsx","pages/Names/Count/index.ts","pages/Names/Search/index.ts","pages/Names/Search/Search.tsx","pages/Names/Table/Table.tsx","pages/Names/Table/index.ts","pages/Names/Names.tsx","pages/Names/index.ts","App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Header","hasSubtitle","ghost","title","subTitle","Link","type","href","target","extra","shape","size","rel","GithubOutlined","withSuspense","Component","props","Suspense","fallback","suspended","wrapPromise","promise","result","status","suspender","value","reason","read","hasNames","a","body","names","Array","isArray","length","name","amount","fetch","response","ok","Error","json","fetchNames","Count","colSpan","sum","React","useCallback","map","reduce","b","Fragment","gutter","justify","span","undefined","loading","style","width","height","data","wordField","weightField","colorField","wordStyle","fontFamily","fontSize","displayName","Search","useState","filter","setFilter","selected","setSelected","matches","nameLower","toLowerCase","filterLower","includes","push","flex","direction","disabled","filterOption","options","notFoundContent","onSelect","find","onSearch","placeholder","allowClear","onClear","Text","columns","dataIndex","key","sorter","localeCompare","Table","tableLayout","dataSource","rowKey","record","TabPane","Tabs","Names","screens","Grid","useBreakpoint","md","tabPosition","tab","App","github","Content","alignSelf","maxWidth","padding","Footer","textAlign","username","repository","commitHash","ReactDOM","render","StrictMode","COMMIT_HASH","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e3d1470a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): void {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): void {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nimport { GithubOutlined } from '@ant-design/icons';\nimport { Button, PageHeader, Typography } from 'antd';\n\n\ninterface HeaderProps {\n  hasSubtitle: boolean;\n}\n\nconst Header: React.FC<HeaderProps> = ({ hasSubtitle }) => (\n  <PageHeader\n    ghost={true}\n    title=\"Names\"\n    subTitle={\n      <Typography.Link\n        type=\"secondary\"\n        href=\"https://github.com/solita/dev-academy-2021\"\n        target=\"_blank\">\n        {hasSubtitle ? 'Solita Dev Academy 2021' : null}\n      </Typography.Link>\n    }\n    extra={[\n      <Button\n        key=\"GitHub\"\n        shape=\"circle\"\n        size=\"large\"\n        rel=\"noopener\"\n        href=\"https://www.github.com/vanhanenjjv/names\"\n        target=\"_blank\">\n        <GithubOutlined />\n      </Button>\n    ]} />\n);\n\nexport default Header;\n","import React from 'react';\n\n\ntype Component<TProps> = React.FunctionComponent<TProps>;\n\ninterface SuspenseProps {\n  suspended: boolean;\n}\n\nfunction withSuspense<TProps>(Component: Component<TProps & SuspenseProps>): Component<TProps> {\n  return function SuspenseWrapper(props: TProps): ReturnType<Component<TProps>> {\n    return (\n      <React.Suspense fallback={<Component suspended={true} {...props} />}>\n        <Component suspended={false} {...props} />\n      </React.Suspense>\n    );\n  };\n}\n\n\nexport default withSuspense;\nexport type { SuspenseProps };\n","import Resource from './resource';\n\n\ntype Status =\n  | 'pending'\n  | 'error'\n  | 'success';\n\nfunction wrapPromise<T>(promise: Promise<T>): Resource<T> {\n  let status: Status = 'pending';\n  let result: T;\n\n  const suspender = promise.then(\n    value  => {\n      status = 'success'; result = value;\n    },\n    reason => {\n      status = 'error';   result = reason;\n    }\n  );\n\n  return {\n    read() {\n      if (status === 'pending') throw suspender;\n      if (status === 'error')   throw result;\n\n      return result;\n    }\n  };\n}\n\n\nexport default wrapPromise;\n","import { wrapPromise } from '../../suspense';\n\n\ninterface Name {\n  name: string;\n  amount: number;\n}\n\ninterface ResponseBodyWithNames {\n  names: Name[];\n}\n\nasync function fetchNames(): Promise<Name[]> {\n  const response = await fetch('https://raw.githubusercontent.com/solita/dev-academy-2021/main/names.json');\n\n  if (!response.ok) throw new Error('Failed to fetch names.');\n\n  const body = await response.json();\n\n  if (!hasNames(body)) throw new Error('Invalid response body.');\n\n  return body.names;\n\n  function hasNames(body: unknown): body is ResponseBodyWithNames {\n    if (typeof body !== 'object') return false;\n    if (body === null)            return false;\n\n    if (!('names' in body))                return false;\n\n    const names = (body as { names: unknown }).names;\n\n    if (!Array.isArray(names))     return false;\n\n    if (names.length === 0) return true;\n\n    if (typeof names[0] !== 'object') return false;\n    if (names[0] === null)            return false;\n\n    if (!('name' in names[0]))   return false;\n    if (!('amount' in names[0])) return false;\n\n    const { name, amount } = (names[0] as { name: unknown, amount: unknown });\n\n    if (typeof name !== 'string')   return false;\n    if (typeof amount !== 'number') return false;\n\n    return true;\n  }\n}\n\nconst names = wrapPromise(fetchNames());\n\n\nexport default names;\nexport type { Name };\n","import React from 'react';\n\nimport { Card, Col, Row, Statistic } from 'antd';\nimport { WordCloud } from '@ant-design/charts';\n\nimport { withSuspense, SuspenseProps } from '../../../suspense';\nimport names from '../api';\n\n\ntype CountProps =\n  & SuspenseProps\n  & {\n    colSpan?: number;\n  };\n\nconst Count: React.FC<CountProps> = ({ suspended, colSpan }) => {\n  const sum = React.useCallback(() =>\n    names.read()\n      .map(name => name.amount)\n      .reduce((a, b) => a + b), []);\n\n  return (\n    <React.Fragment>\n      <Row gutter={[16, 16]} justify=\"center\">\n        <Col span={colSpan}>\n          <Card>\n            <Statistic\n              title=\"Total amount of names\"\n              value={suspended ? undefined : sum()}\n              loading={suspended} />\n          </Card>\n        </Col>\n        <Col span={colSpan}>\n          <Card>\n            <WordCloud\n              style={{\n                width: colSpan ? undefined : 300,\n                height: 300\n              }}\n              loading={suspended}\n              data={suspended ? [] : names.read()}\n              wordField=\"name\"\n              weightField=\"amount\"\n              colorField=\"name\"\n              wordStyle={{ fontFamily: 'Verdana', fontSize: [18, 64] }} />\n          </Card>\n\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nCount.displayName = 'Count';\n\n\nexport default withSuspense(Count);\n","import Count from './Count';\n\n\nexport default Count;\n","import Search from './Search';\n\n\nexport default Search;\n","import React from 'react';\n\nimport { AutoComplete, Card, Col, Row, Space, Typography } from 'antd';\n\nimport { SuspenseProps, withSuspense } from '../../../suspense';\nimport names, { Name } from '../api';\n\n\ntype SearchProps = SuspenseProps;\n\nconst Search: React.FC<SearchProps> = ({ suspended }) => {\n  const [filter, setFilter] = React.useState('');\n  const [selected, setSelected] = React.useState<Name>();\n\n  const match = React.useCallback(\n    () => {\n      const matches: Name[] = [];\n\n      for (const name of names.read()) {\n        const nameLower   = name.name.toLowerCase();\n        const filterLower = filter.toLowerCase();\n\n        if (nameLower === filterLower)       return [name];\n        if (nameLower.includes(filterLower)) matches.push(name);\n      }\n\n      return matches;\n    },\n    [filter]\n  );\n\n  return (\n    <Row justify=\"center\">\n      <Col flex=\"auto\" />\n      <Col flex=\"500px\">\n        <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\n          <AutoComplete\n            style={{ width: '100%' }}\n            disabled={suspended}\n            filterOption\n            options={suspended ? undefined : names.read().map(({ name }) => ({ value: name }))}\n            notFoundContent=\"No matches\"\n            onSelect={select}\n            onSearch={search}\n            placeholder=\"Search by name\"\n            allowClear\n            onClear={clear} />\n          {!suspended && selected && (\n            <Card>\n              <Typography.Text>\n                Solita has {selected.amount} employee{selected.amount === 1 ? '' : 's'} named {selected.name}\n              </Typography.Text>\n            </Card>\n          )}\n        </Space>\n      </Col>\n      <Col flex=\"auto\" />\n    </Row>\n\n  );\n\n  function search(value: string): void {\n    setSelected(undefined);\n    setFilter(value);\n  }\n\n  function clear(): void {\n    setSelected(undefined);\n  }\n\n  function select(name: string): void {\n    setSelected(\n      match().find((match) => match.name.toLowerCase() === name.toLowerCase())\n    );\n  }\n};\n\n\nexport default withSuspense(Search);\n","import React from 'react';\n\nimport { Table as AntdTable } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\n\nimport { SuspenseProps, withSuspense } from '../../../suspense';\nimport names, { Name } from '../api';\n\n\nconst columns: ColumnsType<Name> = [\n  { title: 'Name',  dataIndex:  'name',   key: 'name',   sorter: (a, b) => a.name.localeCompare(b.name) },\n  { title: 'Amount', dataIndex: 'amount', key: 'amount', sorter: (a, b) => a.amount - b.amount          }\n];\n\ntype TableProps = SuspenseProps;\n\nconst Table: React.FC<TableProps> = ({ suspended }) => {\n  return (\n    <AntdTable\n      tableLayout=\"fixed\"\n      dataSource={suspended ? undefined : names.read()}\n      columns={columns}\n      rowKey={suspended ? undefined : record => record.name} />\n  );\n};\n\n\nexport default withSuspense(Table);\n","import Table from './Table';\n\n\nexport default Table;\n","import React from 'react';\n\nimport { Grid, Tabs } from 'antd';\n\nimport Header from './Header';\nimport Count from './Count';\nimport Search from './Search';\nimport Table from './Table';\n\n\nconst { TabPane } = Tabs;\n\nconst Names: React.FC = () => {\n  const screens = Grid.useBreakpoint();\n\n  return (\n    <React.Fragment>\n      <Header hasSubtitle={screens.md ? true : false} />\n      <Tabs  tabPosition={screens.md ? 'left' : 'top'}>\n        <TabPane tab=\"Table\" key=\"1\">\n          <Table />\n        </TabPane>\n        <TabPane tab=\"Search\" key=\"2\">\n          <Search />\n        </TabPane>\n        <TabPane tab=\"Count\" key=\"3\">\n          <Count colSpan={screens.md ? undefined : 24} />\n        </TabPane>\n      </Tabs>\n    </React.Fragment>\n  );\n};\n\n\nexport default Names;\n","import Names from './Names';\n\n\nexport default Names;\n","import React from 'react';\n\nimport { Layout, Typography } from 'antd';\n\nimport { Names } from './pages';\n\n\ninterface GitHubInfo {\n  username: string;\n  repository:string;\n  commitHash: string;\n}\n\ninterface AppProps {\n  github: GitHubInfo;\n}\n\nconst App: React.FC<AppProps> = ({ github }) => {\n  return (\n    <Layout>\n      <Layout.Content style={{\n        width: '100%',\n        alignSelf: 'center',\n        maxWidth: 960,\n        padding: '0 16px'\n      }}>\n        <Names />\n      </Layout.Content>\n      <Layout.Footer style={{ textAlign: 'center' }}>\n        <Typography.Link\n          type=\"secondary\"\n          rel=\"noopener\"\n          target=\"_blank\"\n          href={`https://github.com/${github.username}/${github.repository}/commit/${github.commitHash}`}>\n          {github.commitHash}\n        </Typography.Link>\n      </Layout.Footer>\n    </Layout>\n  );\n};\n\n\nexport default App;\n","import 'antd/dist/antd.css';\nimport './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nimport App from './App';\n\n// Webpack magic\ndeclare const COMMIT_HASH: string;\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App github={{\n      username: 'vanhanenjjv',\n      repository: 'names',\n      commitHash: COMMIT_HASH\n    }} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}