{"version":3,"sources":["suspense/withSuspense.tsx","suspense/wrapPromise.ts","names/api.ts","names/Count.tsx","names/Search/Input.tsx","names/Search/Result.tsx","names/Search/Search.tsx","names/Search/index.ts","names/Table.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["withSuspense","options","Component","Fallback","props","Suspense","fallback","wrapPromise","promise","result","status","suspender","then","value","reason","read","endpoint","a","fetch","response","ok","Error","json","body","names","fetchNames","Count","loading","sum","React","useCallback","map","name","amount","reduce","b","title","Input","onChange","disabled","event","target","style","width","placeholder","Result","length","description","Item","Search","useState","filter","setFilter","matches","useMemo","nameLower","toLowerCase","filterLower","includes","push","size","direction","columns","dataIndex","key","sorter","localeCompare","Table","dataSource","rowKey","record","App","height","Content","align","gutter","xs","sm","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d790bf61.chunk.js","sourcesContent":["import React from 'react';\n\n\ntype Component<TProps> = React.FunctionComponent<TProps>;\ntype Fallback<TProps>  = React.FunctionComponent<TProps>;\n\ninterface SuspenseOptions<TProps> {\n  Component: Component<TProps>;\n  Fallback: Fallback<TProps>;\n}\n\nfunction withSuspense<TProps>(options: SuspenseOptions<TProps>): (props: TProps) => JSX.Element {\n  const { Component, Fallback } = options;\n\n  return props => (\n    <React.Suspense fallback={<Fallback {...props} />}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n}\n\n\nexport default withSuspense;\n","import Resource from './resource';\n\n\ntype Status = 'pending' | 'error' | 'success';\n\nfunction wrapPromise<T>(promise: Promise<T>): Resource<T> {\n  let status: Status = 'pending';\n  let result: T;\n\n  const suspender = promise.then(\n    value => {\n      status = 'success';\n      result = value;\n    },\n    reason => {\n      status = 'error';\n      result = reason;\n    }\n  );\n\n  return {\n    read() {\n      if (status === 'pending') throw suspender;\n      if (status === 'error')   throw result;\n\n      return result;\n    }\n  };\n}\n\n\nexport default wrapPromise;\n","import { wrapPromise } from \"../suspense\";\nimport Name from './name';\n\n\nconst endpoint = 'https://raw.githubusercontent.com/solita/dev-academy-2021/main/names.json';\n\nasync function fetchNames(): Promise<Name[]> {\n  const response = await fetch(endpoint);\n\n  if (!response.ok) throw new Error('Failed to fetch names.');\n\n  const body = await response.json();\n\n  if (!('names' in body)) throw new Error(`Field 'names' not found in the response body.`);\n\n  return body.names;\n}\n\nconst names = wrapPromise(fetchNames());\n\n\nexport default names;\n","import React from 'react';\n\nimport { Card, Statistic } from 'antd';\n\nimport { withSuspense } from '../suspense';\nimport names from './api';\n\n\ninterface CountProps {\n  loading?: boolean;\n}\n\n\nconst Count: React.FC<CountProps> = ({ loading }) => {\n  const sum = React.useCallback(() => names.read().map(name => name.amount).reduce((a, b) => a + b), []);\n\n  return (\n    <Card>\n      {loading\n        ? <Statistic title=\"Total amount of names\" loading />\n        : <Statistic title=\"Total amount of names\" value={sum()} />}\n    </Card>\n  );\n};\n\n\nexport default withSuspense({\n  Component: () => <Count />,\n  Fallback:  () => <Count loading />\n});\n","import { Input as AntdInput } from 'antd';\n\n\ninterface InputProps {\n  onChange: (value: string) => void;\n  disabled: boolean;\n}\n\nconst Input: React.FC<InputProps> = ({ onChange, disabled }) => {\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => onChange(event.target.value);\n\n  return (\n    <AntdInput\n      disabled={disabled}\n      onChange={handleChange}\n      style={{ width: '100%' }}\n      placeholder=\"Search by name\" />\n  );\n};\n\n\nexport default Input;\n","import React from \"react\";\n\nimport { Empty, List, Typography } from \"antd\";\n\nimport Name from \"../name\";\n\n\ninterface ResultProps {\n  names: Name[];\n}\n\nconst Result: React.FC<ResultProps> = ({ names }) => {\n  if (names.length === 0) return <Empty description=\"No matches\" />;\n  if (names.length >= 5)  return <Typography>Too many matches</Typography>;\n  if (names.length === 1) return <Typography>Solita has {names[0].amount} employees named {names[0].name}</Typography>;\n\n  return (\n    <List style={{ width: '100%' }}>\n      {names.map(({ name }) => <List.Item key={name}>{name}</List.Item>)}\n    </List>\n  );\n};\n\n\nexport default Result;\n","import { Card, Space } from \"antd\";\nimport React from 'react';\nimport { withSuspense } from \"../../suspense\";\nimport names from '../api';\nimport Name from \"../name\";\n\nimport Input from './Input';\nimport Result from './Result';\n\n\ninterface SearchProps {\n  loading?: boolean;\n}\n\nconst Search: React.FC<SearchProps> = ({ loading }) => {\n  const [filter, setFilter] = React.useState('');\n\n  const matches = React.useMemo(match, [filter, loading]);\n\n  if (loading) return (\n    <Card style={{ }}>\n      <Space \n        size=\"large\" \n        direction=\"vertical\" \n        style={{ width: '100%' }}>\n        <Input onChange={setFilter} disabled={true} />\n        <Result names={[]} />\n      </Space>\n    </Card>\n  );\n\n  return (\n    <Card style={{ }}>\n      <Space \n        size=\"large\" \n        direction=\"vertical\" \n        style={{ width: '100%' }}>\n        <Input onChange={setFilter} disabled={loading ?? false} />\n        {filter === '' ? null : <Result names={matches} />}\n      </Space>\n    </Card>\n  );\n\n  function match(): Name[] {\n    const matches: Name[] = [];\n\n    if (loading) return [];\n\n    for (const name of names.read()) {\n      const nameLower   = name.name.toLowerCase();\n      const filterLower = filter.toLowerCase();\n\n      if (nameLower === filterLower)       return [name];\n      if (nameLower.includes(filterLower)) matches.push(name);\n    }\n\n    return matches;\n  }\n};\n\n\nexport default withSuspense({\n  Component: () => <Search />,\n  Fallback:  () => <Search loading />\n});\n\n","import Search from './Search';\n\n\nexport default Search;\n","import React from 'react';\n\nimport { Table as AntdTable } from 'antd';\nimport { ColumnsType } from 'antd/lib/table';\n\nimport { withSuspense } from '../suspense';\nimport names from './api';\nimport Name from './name';\n\n\nconst columns: ColumnsType<Name> = [\n  { title: 'Name',  dataIndex:  'name',   key: 'name',   sorter: (a, b) => a.name.localeCompare(b.name) },\n  { title: 'Amount', dataIndex: 'amount', key: 'amount', sorter: (a, b) => a.amount - b.amount          }\n];\n\ninterface TableProps {\n  loading?: boolean;\n}\n\nconst Table: React.FC<TableProps> = ({ loading }) => {\n  if (loading) return <AntdTable columns={columns} loading />;\n\n  return (\n    <AntdTable \n      dataSource={names.read()} \n      columns={columns} \n      rowKey={record => record.name} />\n  );\n};\n\n\nexport default withSuspense({\n  Component: () => <Table />,\n  Fallback:  () => <Table loading />\n});\n","import { Col, Grid, Row, Space, Typography } from 'antd';\nimport { Layout } from 'antd';\nimport React from 'react';\n\n\nimport Count from './names/Count';\nimport Search from './names/Search';\nimport Table from './names/Table';\n\n\nconst App: React.FC = () => {\n  return (\n    <Layout style={{ height: '100%' }}>\n      <Layout.Content>\n        <Space size=\"middle\" align=\"center\" direction=\"vertical\" >\n\n          <Row gutter={[16, 16]}>\n            \n            <Col xs={24} sm={12}><Count /></Col>\n            <Col xs={24} sm={12}><Search /></Col>\n            <Col xs={24} sm={24}><Table /></Col>\n          </Row>\n        </Space>\n      </Layout.Content>\n    </Layout>\n  );\n};\n\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'antd/dist/antd.css';\nimport './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}